{
    "docs": [
        {
            "location": "/", 
            "text": "ClimateTools.jl documentation\n\n\n\n\nClimateTools.jl documentation\n\n\nOverview\n\n\nObjectives\n\n\nInstallation\n\n\nFunctions - Climate indices\n\n\nFunctions - Reading netCDF files\n\n\nFunctions - Tools\n\n\nIndex\n\n\n\n\n\n\n\n\n\n\nOverview\n\n\nThis package is a collection of commonly-used tools in Climate Science. This is mainly a work-in-progress package, developed for myself and is available here, for \ncommon-good\n purpose as well as for archive purpose. Nothing fancy here, basics of climate field analysis will be covered, with some forays into some \n\"state-of-the-art\"\n techniques.\n\n\nThe climate indices are coded to use multiple threads. To gain maximum performance, use (bash shell) \nexport JULIA_NUM_THREADS=n\n, where \nn\n is the number of threads. To get an idea of the number of threads you can use type (in Julia) \nSys.CPU_CORES\n. This can greatly reduce calculation time.\n\n\n\n\nObjectives\n\n\n\n\nVisualization of NetCDF files (e.g. temporal mean of a given NetCDF file), for rapid evaluation of NetCDF files\n\n\nMigration of NetCDF files to Julia matrix\n\n\nClimate indices from The joint CCl/CLIVAR/JCOMM Expert Team (ET) on Climate Change Detection and Indices (ETCCDI)\n\n\nCustom climate indices\n\n\nPost-processing of climate timeseries using Quantile-Quantile mapping methods (cf. Piani et al. 2010)\n\n\n\n\n\n\nInstallation\n\n\nThis package is registered in \nMETADATA.jl\n and so can be installed using \nPkg.add\n\n\nPkg.add(\nClimateTools\n)\n\n\n\n\nFor the latest version, checkout master branch\n\n\nPkg.checkout(\nClimateTools\n)\n\n\n\n\n\n\nFunctions - Climate indices\n\n\nClimateTools.frostdays(data::Array{Float64, 1}, timeV::StepRange{Date, Base.Dates.Day})\nClimateTools.icingdays(data::Array{Float64, 1}, timeV::StepRange{Date, Base.Dates.Day})\nClimateTools.annualmin(data::Array{Float64, 1}, timeV::StepRange{Date, Base.Dates.Day})\nClimateTools.annualmax(data::Array{Float64, 1}, timeV::StepRange{Date, Base.Dates.Day})\nClimateTools.tropicalnights(data::Array{Float64, 1}, timeV::StepRange{Date, Base.Dates.Day})\nClimateTools.customthresover(data::Array{Float64, 1}, timeV::StepRange{Date, Base.Dates.Day}, thres)\nClimateTools.customthresunder(data::Array{Float64, 1}, timeV::StepRange{Date, Base.Dates.Day}, thres)\nClimateTools.prcp1(data::Array{Float64, 1}, timeV::StepRange{Date, Base.Dates.Day})\nClimateTools.summerdays(data::Array{Float64, 1}, timeV::StepRange{Date, Base.Dates.Day})\n\n\n\n\n\n\nFunctions - Reading netCDF files\n\n\nClimateTools.nc2julia(file::String, var::String, poly::Array{Float64})\n\n\n\n\ntype ClimGrid  \n  data::AxisArray  \n  model::String\n  experiment::String\n  run::String\n  filename::String\n  dataunits::String\n  latunits::String\n  lonunits::String\nend\n\n\n\n\n\n\nFunctions - Tools\n\n\nClimateTools.inpoly(p, poly::Matrix)\nClimateTools.meshgrid(data::Array{Float64, 1}, timeV::StepRange{Date, Base.Dates.Day})\nClimateTools.windnr(p, poly::Matrix)\nClimateTools.boxcar3(A::AbstractArray)\n\n\n\n\n\n\nIndex\n\n\n\n\nClimateTools.inpoly\n\n\nClimateTools.meshgrid\n\n\nClimateTools.windnr", 
            "title": "Home"
        }, 
        {
            "location": "/#climatetoolsjl-documentation", 
            "text": "ClimateTools.jl documentation  Overview  Objectives  Installation  Functions - Climate indices  Functions - Reading netCDF files  Functions - Tools  Index", 
            "title": "ClimateTools.jl documentation"
        }, 
        {
            "location": "/#overview", 
            "text": "This package is a collection of commonly-used tools in Climate Science. This is mainly a work-in-progress package, developed for myself and is available here, for  common-good  purpose as well as for archive purpose. Nothing fancy here, basics of climate field analysis will be covered, with some forays into some  \"state-of-the-art\"  techniques.  The climate indices are coded to use multiple threads. To gain maximum performance, use (bash shell)  export JULIA_NUM_THREADS=n , where  n  is the number of threads. To get an idea of the number of threads you can use type (in Julia)  Sys.CPU_CORES . This can greatly reduce calculation time.", 
            "title": "Overview"
        }, 
        {
            "location": "/#objectives", 
            "text": "Visualization of NetCDF files (e.g. temporal mean of a given NetCDF file), for rapid evaluation of NetCDF files  Migration of NetCDF files to Julia matrix  Climate indices from The joint CCl/CLIVAR/JCOMM Expert Team (ET) on Climate Change Detection and Indices (ETCCDI)  Custom climate indices  Post-processing of climate timeseries using Quantile-Quantile mapping methods (cf. Piani et al. 2010)", 
            "title": "Objectives"
        }, 
        {
            "location": "/#installation", 
            "text": "This package is registered in  METADATA.jl  and so can be installed using  Pkg.add  Pkg.add( ClimateTools )  For the latest version, checkout master branch  Pkg.checkout( ClimateTools )", 
            "title": "Installation"
        }, 
        {
            "location": "/#functions-climate-indices", 
            "text": "ClimateTools.frostdays(data::Array{Float64, 1}, timeV::StepRange{Date, Base.Dates.Day})\nClimateTools.icingdays(data::Array{Float64, 1}, timeV::StepRange{Date, Base.Dates.Day})\nClimateTools.annualmin(data::Array{Float64, 1}, timeV::StepRange{Date, Base.Dates.Day})\nClimateTools.annualmax(data::Array{Float64, 1}, timeV::StepRange{Date, Base.Dates.Day})\nClimateTools.tropicalnights(data::Array{Float64, 1}, timeV::StepRange{Date, Base.Dates.Day})\nClimateTools.customthresover(data::Array{Float64, 1}, timeV::StepRange{Date, Base.Dates.Day}, thres)\nClimateTools.customthresunder(data::Array{Float64, 1}, timeV::StepRange{Date, Base.Dates.Day}, thres)\nClimateTools.prcp1(data::Array{Float64, 1}, timeV::StepRange{Date, Base.Dates.Day})\nClimateTools.summerdays(data::Array{Float64, 1}, timeV::StepRange{Date, Base.Dates.Day})", 
            "title": "Functions - Climate indices"
        }, 
        {
            "location": "/#functions-reading-netcdf-files", 
            "text": "ClimateTools.nc2julia(file::String, var::String, poly::Array{Float64})  type ClimGrid  \n  data::AxisArray  \n  model::String\n  experiment::String\n  run::String\n  filename::String\n  dataunits::String\n  latunits::String\n  lonunits::String\nend", 
            "title": "Functions - Reading netCDF files"
        }, 
        {
            "location": "/#functions-tools", 
            "text": "ClimateTools.inpoly(p, poly::Matrix)\nClimateTools.meshgrid(data::Array{Float64, 1}, timeV::StepRange{Date, Base.Dates.Day})\nClimateTools.windnr(p, poly::Matrix)\nClimateTools.boxcar3(A::AbstractArray)", 
            "title": "Functions - Tools"
        }, 
        {
            "location": "/#index", 
            "text": "ClimateTools.inpoly  ClimateTools.meshgrid  ClimateTools.windnr", 
            "title": "Index"
        }
    ]
}