{
    "docs": [
        {
            "location": "/", 
            "text": "ClimateTools.jl documentation\n\n\n\n\nClimateTools.jl documentation\n\n\nOverview\n\n\nObjectives\n\n\nInstallation\n\n\nFunctions - Climate indices\n\n\nFunctions - Reading netCDF files\n\n\nFunctions - Tools\n\n\nIndex\n\n\n\n\n\n\n\n\n\n\nOverview\n\n\nThis package is a collection of commonly-used tools in Climate Science. This is mainly a work-in-progress package, developed for myself and is available here, for \ncommon-good\n purpose as well as for archive purpose. Nothing fancy here, basics of climate field analysis will be covered, with some forays into some \n\"state-of-the-art\"\n techniques.\n\n\nThe climate indices are coded to use multiple threads. To gain maximum performance, use (bash shell) \nexport JULIA_NUM_THREADS=n\n, where \nn\n is the number of threads. To get an idea of the number of threads you can use type (in Julia) \nSys.CPU_CORES\n. This can greatly reduce calculation time.\n\n\n\n\nObjectives\n\n\n\n\nVisualization of NetCDF files (e.g. temporal mean of a given NetCDF file), for rapid evaluation of NetCDF files\n\n\nMigration of NetCDF files to Julia matrix\n\n\nClimate indices from The joint CCl/CLIVAR/JCOMM Expert Team (ET) on Climate Change Detection and Indices (ETCCDI)\n\n\nCustom climate indices\n\n\nPost-processing of climate timeseries using Quantile-Quantile mapping methods (cf. Piani et al. 2010)\n\n\n\n\n\n\nInstallation\n\n\nThis package is registered in \nMETADATA.jl\n and so can be installed using \nPkg.add\n\n\nPkg.add(\nClimateTools\n)\n\n\n\n\nFor the latest version, checkout master branch\n\n\nPkg.checkout(\nClimateTools\n)\n\n\n\n\n\n\nFunctions - Climate indices\n\n\n#\n\n\nClimateTools.frostdays\n \n \nMethod\n.\n\n\nfrostdays(data::Array, time::StepRange{Date,Base.Dates.Day})\n\n\nFD, Number of frost days: Annual count of days when TN (daily minimum temperature) \n 0 Celsius.\n\n\nLet TN(i,j) be daily minimum temperature on day i in year j. Count the number of days where:\n\n\nTN(i,j) \n 0 Celsius.\n\n\nsource\n\n\n#\n\n\nClimateTools.icingdays\n \n \nMethod\n.\n\n\nicingdays(data::Array, time::StepRange{Date,Base.Dates.Day})\n\n\nID, Number of summer days: Annual count of days when TX (daily maximum temperature) \n 0 degree Celsius.\n\n\nLet TX(i,j) be daily maximum temperature on day i in year j. Count the number of days where:\n\n\nTX(i,j) \n 0 Celsius.\n\n\nsource\n\n\n#\n\n\nClimateTools.annualmin\n \n \nMethod\n.\n\n\nannualmin(data::Array, time::StepRange{Date,Base.Dates.Day})\n\n\nAM, Value of annual minimum of array data.\n\n\nLet data(i,j) be daily time serie on day i in year j. Extract the lowest value for year j.\n\n\nsource\n\n\n#\n\n\nClimateTools.annualmax\n \n \nMethod\n.\n\n\nannualmax(data::Array, time::StepRange{Date,Base.Dates.Day})\n\n\nAM, Value of annual maximum of array data.\n\n\nLet data(i,j) be daily time serie on day i in year j. Extract the highest value for year j.\n\n\nsource\n\n\n#\n\n\nClimateTools.tropicalnights\n \n \nMethod\n.\n\n\ntropicalnights(data::Array, time::StepRange{Date,Base.Dates.Day})\n\n\nTropicalNights, Number of tropical nights: Annual count of days when TN (daily maximum temperature) \n 20 degree Celsius.\n\n\nLet TN(i,j) be daily minimum temperature on day i in year j. Count the number of days where:\n\n\nTN(i,j) \n 20 Celsius.\n\n\nsource\n\n\n#\n\n\nClimateTools.customthresover\n \n \nMethod\n.\n\n\ncustomthresover(data::Array, time::StepRange{Date,Base.Dates.Day}, thres)\n\n\ncustomthresover, annual number of days over a specified threshold.\n\n\nLet TS(i,j) be a daily time serie value on day i in year j. Count the number of days where:\n\n\nTS(i,j) \n thres.\n\n\nsource\n\n\n#\n\n\nClimateTools.customthresunder\n \n \nMethod\n.\n\n\ncustomthresunder(data::Array, time::StepRange{Date,Base.Dates.Day}, thres)\n\n\ncustomthresover, annual number of days under a specified threshold.\n\n\nLet TS(i,j) be a daily time serie value on day i in year j. Count the number of days where:\n\n\nTS(i,j) \n thres.\n\n\nsource\n\n\n#\n\n\nClimateTools.prcp1\n \n \nMethod\n.\n\n\nprcp1(data::Array, timevector::StepRange{Date,Base.Dates.Day})\n\n\n\n\nAnnual number with preciptation over 1 mm. This function returns a boolean vector. \ntrue\n if the data is higher or equal to 1 and \nfalse\n otherwise.\n\n\nsource\n\n\n#\n\n\nClimateTools.summerdays\n \n \nMethod\n.\n\n\nsummerdays(data::Array, time::StepRange{Date,Base.Dates.Day})\n\n\nSD, Number of summer days: Annual count of days when TX (daily maximum temperature) \n 25 degree Celsius.\n\n\nLet TX(i,j) be daily maximum temperature on day i in year j. Count the number of days where:\n\n\nTX(i,j) \n= 25 Celsius.\n\n\nsource\n\n\n\n\nFunctions - Reading netCDF files\n\n\n#\n\n\nClimateTools.nc2julia\n \n \nMethod\n.\n\n\nnetcdf2julia(file::String, var::String, poly::Vector)\n\n\n\n\nReturns a ClimGrid type with the data in \nfile\n of variable \nvar\n inside the polygon \npoly\n. Metadata is built-in the ClimGrid type\n\n\nsource\n\n\nThis function returns a ClimGrid type, with the date stored in an AxisArray type (with time, longitude and latitude dimensions).\n\n\ntype ClimGrid  \n  data::AxisArray  \n  model::String\n  experiment::String\n  run::String\n  filename::String\n  dataunits::String\n  latunits::String\n  lonunits::String\nend\n\n\n\n\n\n\nFunctions - Tools\n\n\n#\n\n\nClimateTools.inpoly\n \n \nMethod\n.\n\n\ninpoly(p, poly::Matrix)\n\n\n\n\nDetermines if a point is inside a polygon.\n\n\n\n\np \u2013 point (x,y) or [x,y]\n\n\npoly \u2013 polygon vertices \nx1 x2 ... xn x1                           y1 y2 ... yn y1\n\n\n\n\nReturns true if point has an odd winding number.  This should label points as exterior which are inside outcrops.  See test for a test.\n\n\nsource\n\n\n#\n\n\nClimateTools.meshgrid\n \n \nMethod\n.\n\n\nThis function creates a 2-D mesh-grid in a format consistent with Matlab's function meshgrid()\n\n\n[X, Y] = meshgrid(XV, YV)\n\n\nwhere XV and YV are vectors.\n\n\nsource\n\n\n#\n\n\nClimateTools.windnr\n \n \nMethod\n.\n\n\nDetermines the winding number of a point and a polygon, i.e. how many times a polygon winds around the point.\n\n\nIt follows Dan Sunday: http://geomalgorithms.com/a03-_inclusion.html.\n\n\nsource\n\n\n#\n\n\nClimateTools.boxcar3\n \n \nMethod\n.\n\n\nThis function creates a boxcar averager with a window length of 3\n\n\nfunction boxcar3(A::AbstractArray)\n\n\nsource\n\n\n\n\nIndex\n\n\n\n\nClimateTools.annualmax\n\n\nClimateTools.annualmin\n\n\nClimateTools.boxcar3\n\n\nClimateTools.customthresover\n\n\nClimateTools.customthresunder\n\n\nClimateTools.frostdays\n\n\nClimateTools.icingdays\n\n\nClimateTools.inpoly\n\n\nClimateTools.meshgrid\n\n\nClimateTools.nc2julia\n\n\nClimateTools.prcp1\n\n\nClimateTools.summerdays\n\n\nClimateTools.tropicalnights\n\n\nClimateTools.windnr", 
            "title": "Home"
        }, 
        {
            "location": "/#climatetoolsjl-documentation", 
            "text": "ClimateTools.jl documentation  Overview  Objectives  Installation  Functions - Climate indices  Functions - Reading netCDF files  Functions - Tools  Index", 
            "title": "ClimateTools.jl documentation"
        }, 
        {
            "location": "/#overview", 
            "text": "This package is a collection of commonly-used tools in Climate Science. This is mainly a work-in-progress package, developed for myself and is available here, for  common-good  purpose as well as for archive purpose. Nothing fancy here, basics of climate field analysis will be covered, with some forays into some  \"state-of-the-art\"  techniques.  The climate indices are coded to use multiple threads. To gain maximum performance, use (bash shell)  export JULIA_NUM_THREADS=n , where  n  is the number of threads. To get an idea of the number of threads you can use type (in Julia)  Sys.CPU_CORES . This can greatly reduce calculation time.", 
            "title": "Overview"
        }, 
        {
            "location": "/#objectives", 
            "text": "Visualization of NetCDF files (e.g. temporal mean of a given NetCDF file), for rapid evaluation of NetCDF files  Migration of NetCDF files to Julia matrix  Climate indices from The joint CCl/CLIVAR/JCOMM Expert Team (ET) on Climate Change Detection and Indices (ETCCDI)  Custom climate indices  Post-processing of climate timeseries using Quantile-Quantile mapping methods (cf. Piani et al. 2010)", 
            "title": "Objectives"
        }, 
        {
            "location": "/#installation", 
            "text": "This package is registered in  METADATA.jl  and so can be installed using  Pkg.add  Pkg.add( ClimateTools )  For the latest version, checkout master branch  Pkg.checkout( ClimateTools )", 
            "title": "Installation"
        }, 
        {
            "location": "/#functions-climate-indices", 
            "text": "#  ClimateTools.frostdays     Method .  frostdays(data::Array, time::StepRange{Date,Base.Dates.Day})  FD, Number of frost days: Annual count of days when TN (daily minimum temperature)   0 Celsius.  Let TN(i,j) be daily minimum temperature on day i in year j. Count the number of days where:  TN(i,j)   0 Celsius.  source  #  ClimateTools.icingdays     Method .  icingdays(data::Array, time::StepRange{Date,Base.Dates.Day})  ID, Number of summer days: Annual count of days when TX (daily maximum temperature)   0 degree Celsius.  Let TX(i,j) be daily maximum temperature on day i in year j. Count the number of days where:  TX(i,j)   0 Celsius.  source  #  ClimateTools.annualmin     Method .  annualmin(data::Array, time::StepRange{Date,Base.Dates.Day})  AM, Value of annual minimum of array data.  Let data(i,j) be daily time serie on day i in year j. Extract the lowest value for year j.  source  #  ClimateTools.annualmax     Method .  annualmax(data::Array, time::StepRange{Date,Base.Dates.Day})  AM, Value of annual maximum of array data.  Let data(i,j) be daily time serie on day i in year j. Extract the highest value for year j.  source  #  ClimateTools.tropicalnights     Method .  tropicalnights(data::Array, time::StepRange{Date,Base.Dates.Day})  TropicalNights, Number of tropical nights: Annual count of days when TN (daily maximum temperature)   20 degree Celsius.  Let TN(i,j) be daily minimum temperature on day i in year j. Count the number of days where:  TN(i,j)   20 Celsius.  source  #  ClimateTools.customthresover     Method .  customthresover(data::Array, time::StepRange{Date,Base.Dates.Day}, thres)  customthresover, annual number of days over a specified threshold.  Let TS(i,j) be a daily time serie value on day i in year j. Count the number of days where:  TS(i,j)   thres.  source  #  ClimateTools.customthresunder     Method .  customthresunder(data::Array, time::StepRange{Date,Base.Dates.Day}, thres)  customthresover, annual number of days under a specified threshold.  Let TS(i,j) be a daily time serie value on day i in year j. Count the number of days where:  TS(i,j)   thres.  source  #  ClimateTools.prcp1     Method .  prcp1(data::Array, timevector::StepRange{Date,Base.Dates.Day})  Annual number with preciptation over 1 mm. This function returns a boolean vector.  true  if the data is higher or equal to 1 and  false  otherwise.  source  #  ClimateTools.summerdays     Method .  summerdays(data::Array, time::StepRange{Date,Base.Dates.Day})  SD, Number of summer days: Annual count of days when TX (daily maximum temperature)   25 degree Celsius.  Let TX(i,j) be daily maximum temperature on day i in year j. Count the number of days where:  TX(i,j)  = 25 Celsius.  source", 
            "title": "Functions - Climate indices"
        }, 
        {
            "location": "/#functions-reading-netcdf-files", 
            "text": "#  ClimateTools.nc2julia     Method .  netcdf2julia(file::String, var::String, poly::Vector)  Returns a ClimGrid type with the data in  file  of variable  var  inside the polygon  poly . Metadata is built-in the ClimGrid type  source  This function returns a ClimGrid type, with the date stored in an AxisArray type (with time, longitude and latitude dimensions).  type ClimGrid  \n  data::AxisArray  \n  model::String\n  experiment::String\n  run::String\n  filename::String\n  dataunits::String\n  latunits::String\n  lonunits::String\nend", 
            "title": "Functions - Reading netCDF files"
        }, 
        {
            "location": "/#functions-tools", 
            "text": "#  ClimateTools.inpoly     Method .  inpoly(p, poly::Matrix)  Determines if a point is inside a polygon.   p \u2013 point (x,y) or [x,y]  poly \u2013 polygon vertices  x1 x2 ... xn x1                           y1 y2 ... yn y1   Returns true if point has an odd winding number.  This should label points as exterior which are inside outcrops.  See test for a test.  source  #  ClimateTools.meshgrid     Method .  This function creates a 2-D mesh-grid in a format consistent with Matlab's function meshgrid()  [X, Y] = meshgrid(XV, YV)  where XV and YV are vectors.  source  #  ClimateTools.windnr     Method .  Determines the winding number of a point and a polygon, i.e. how many times a polygon winds around the point.  It follows Dan Sunday: http://geomalgorithms.com/a03-_inclusion.html.  source  #  ClimateTools.boxcar3     Method .  This function creates a boxcar averager with a window length of 3  function boxcar3(A::AbstractArray)  source", 
            "title": "Functions - Tools"
        }, 
        {
            "location": "/#index", 
            "text": "ClimateTools.annualmax  ClimateTools.annualmin  ClimateTools.boxcar3  ClimateTools.customthresover  ClimateTools.customthresunder  ClimateTools.frostdays  ClimateTools.icingdays  ClimateTools.inpoly  ClimateTools.meshgrid  ClimateTools.nc2julia  ClimateTools.prcp1  ClimateTools.summerdays  ClimateTools.tropicalnights  ClimateTools.windnr", 
            "title": "Index"
        }
    ]
}